
LED_TEST.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000f6  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000687  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005af  00000000  00000000  00000887  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c8  00000000  00000000  00000e36  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000369  00000000  00000000  00001134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000121  00000000  00000000  0000149d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000015be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#define SEVEN 0b00000111
#define EIGHT 0b01111111
#define NINE 0b01101111

int main(void)
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	u8 segment[10] = {ZERO , ONE, TWO, THREE, FOUR, FIVE, SIX, SEVEN, EIGHT, NINE};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	/* Configure OUTPUT pins for the led*/
	DDRA = 0b00000001;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	8a bb       	out	0x1a, r24	; 26
	
	/* Configure 7-segment display for cathode which means dot pin (pin 8) connected to ground for DDRD*/
	DDRD = 0b11111111; // ===  DDRD = 255 this will make them all output
  ac:	8f ef       	ldi	r24, 0xFF	; 255
  ae:	81 bb       	out	0x11, r24	; 17
  b0:	9e 01       	movw	r18, r28
  b2:	25 5f       	subi	r18, 0xF5	; 245
  b4:	3f 4f       	sbci	r19, 0xFF	; 255
    while (1) 
    {
		for (u8 i = 0; i < 10; i++)
		{
			/* ON states */
			PORTA = 0b00000001;
  b6:	91 e0       	ldi	r25, 0x01	; 1
  b8:	fe 01       	movw	r30, r28
  ba:	31 96       	adiw	r30, 0x01	; 1
  bc:	9b bb       	out	0x1b, r25	; 27
			PORTD = segment[i];
  be:	81 91       	ld	r24, Z+
  c0:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	4f ef       	ldi	r20, 0xFF	; 255
  c4:	54 e3       	ldi	r21, 0x34	; 52
  c6:	8c e0       	ldi	r24, 0x0C	; 12
  c8:	41 50       	subi	r20, 0x01	; 1
  ca:	50 40       	sbci	r21, 0x00	; 0
  cc:	80 40       	sbci	r24, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <main+0x46>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <main+0x50>
  d2:	00 00       	nop
			_delay_ms(500);
			
			/* OFF states */
			PORTA = 0b00000000;
  d4:	1b ba       	out	0x1b, r1	; 27
			PORTD = 0b00000000;
  d6:	12 ba       	out	0x12, r1	; 18
  d8:	4f ef       	ldi	r20, 0xFF	; 255
  da:	54 e3       	ldi	r21, 0x34	; 52
  dc:	8c e0       	ldi	r24, 0x0C	; 12
  de:	41 50       	subi	r20, 0x01	; 1
  e0:	50 40       	sbci	r21, 0x00	; 0
  e2:	80 40       	sbci	r24, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x5c>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x66>
  e8:	00 00       	nop
	DDRD = 0b11111111; // ===  DDRD = 255 this will make them all output
	
	/* Turn on the led by writing 1 on the led to output voltage */
    while (1) 
    {
		for (u8 i = 0; i < 10; i++)
  ea:	e2 17       	cp	r30, r18
  ec:	f3 07       	cpc	r31, r19
  ee:	31 f7       	brne	.-52     	; 0xbc <main+0x3a>
  f0:	e3 cf       	rjmp	.-58     	; 0xb8 <main+0x36>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
